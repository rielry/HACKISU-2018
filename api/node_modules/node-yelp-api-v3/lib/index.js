'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _oauth = require('oauth');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var baseUrl = 'https://api.yelp.com/v3/';

var Yelp = function () {
  function Yelp(opts) {
    _classCallCheck(this, Yelp);

    this.access_token = '';
    this.timeout = opts.timeout || 2000;
    this.fetchingAccessToken = false;
    this.oauth2 = new _oauth.OAuth2(opts.consumer_key, opts.consumer_secret, 'https://api.yelp.com/', null, 'oauth2/token', null);
    // Send bearer token in 'Authorization' header
    this.oauth2.useAuthorizationHeaderforGET(true);
    // Get the access token on initialization
    this.getAccessToken();
  }

  _createClass(Yelp, [{
    key: 'getAccessToken',
    value: function getAccessToken() {
      var _this = this;

      this.fetchingAccessToken = true;
      // Get and set the access token
      return new Promise(function (resolve, reject) {
        _this.oauth2.getOAuthAccessToken('', { 'grant_type': 'client_credentials' }, function (e, access_token, refresh_token, results) {
          if (e) {
            _this.fetchingAccessToken = false;
            return reject(e);
          }
          if (access_token) {
            _this.access_token = access_token;
            _this.fetchingAccessToken = false;
            return resolve();
          }
        });
      });
    }
  }, {
    key: 'get',
    value: function get(resource) {
      var _this2 = this;

      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!this.access_token && this.fetchingAccessToken === false) {
        return this.getAccessToken().then(function () {
          return _this2.makeReq(resource, params);
        });
      } else if (!this.access_token && this.fetchingAccessToken === true) {
        return new Promise(function (resolve, reject) {
          var time = 0;
          var maxTime = _this2.timeout; // wait a max of two seconds or specified timeout
          var interval = setInterval(function () {
            if (_this2.access_token) {
              clearInterval(interval);
              return resolve();
            }
            if (time > maxTime) {
              clearInterval(interval);
              return reject(new Error('Yelp fetch token request timed out.'));
            }
            time += 100;
          }, 200);
        }).then(function () {
          return _this2.makeReq(resource, params);
        }).catch(function (err) {
          return console.log(err);
        });
      } else {
        return this.makeReq(resource, params);
      }
    }
  }, {
    key: 'makeReq',
    value: function makeReq(resource) {
      var _this3 = this;

      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var tries = arguments[2];

      if (!tries) {
        tries = 0;
      }

      var promise = new Promise(function (resolve, reject) {
        var debug = params.debug;
        delete params.debug;

        // If there is no access token, throw an error stating that
        if (!_this3.access_token) {
          return reject(new Error('Missing access_token'));
        }

        _this3.oauth2.get('' + baseUrl + resource + '?' + _querystring2.default.stringify(params), _this3.access_token, function (err, _data, response) {
          if (err) {
            // Try three times on a 401 to refresh the access token
            // It seems they last for about three months before expiring
            if (tries < 3 && err.statusCode === 401) {
              tries += 1;
              return _this3.getAccessToken().then(function () {
                return _this3.makeReq(resource, params, tries);
              });
            }

            return reject(err);
          }
          var data = JSON.parse(_data);
          if (debug) {
            return resolve([data, response]);
          }
          resolve(data);
        });
      });
      return promise;
    }

    // https://www.yelp.com/developers/documentation/v3/business_search

  }, {
    key: 'searchBusiness',
    value: function searchBusiness(params) {
      return this.get('businesses/search', params);
    }

    // https://www.yelp.com/developers/documentation/v3/business_search_phone

  }, {
    key: 'searchBusinessPhone',
    value: function searchBusinessPhone(phone) {
      return this.get('businesses/search/phone', { phone: phone });
    }

    // https://www.yelp.com/developers/documentation/v3/transactions_search

  }, {
    key: 'searchTransaction',
    value: function searchTransaction(type, params) {
      return this.get('transactions/' + (type || 'delivery') + '/search', params);
    }

    // https://www.yelp.com/developers/documentation/v3/business

  }, {
    key: 'getBusinessById',
    value: function getBusinessById(id) {
      return this.get('businesses/' + id, undefined);
    }

    // https://www.yelp.com/developers/documentation/v3/business_reviews

  }, {
    key: 'getReviews',
    value: function getReviews(id, params) {
      return this.get('businesses/' + id + '/reviews', params);
    }

    // https://www.yelp.com/developers/documentation/v3/autocomplete

  }, {
    key: 'autoComplete',
    value: function autoComplete(params) {
      return this.get('autocomplete', params);
    }
  }]);

  return Yelp;
}();

exports.default = Yelp;